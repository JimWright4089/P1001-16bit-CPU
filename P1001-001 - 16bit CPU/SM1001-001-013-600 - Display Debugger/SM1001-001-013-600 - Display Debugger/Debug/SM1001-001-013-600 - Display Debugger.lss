
SM1001-001-013-600 - Display Debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	22 c0       	rjmp	.+68     	; 0x50 <__bad_interrupt>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>
  1e:	18 c0       	rjmp	.+48     	; 0x50 <__bad_interrupt>
  20:	17 c0       	rjmp	.+46     	; 0x50 <__bad_interrupt>
  22:	16 c0       	rjmp	.+44     	; 0x50 <__bad_interrupt>
  24:	15 c0       	rjmp	.+42     	; 0x50 <__bad_interrupt>
  26:	14 c0       	rjmp	.+40     	; 0x50 <__bad_interrupt>
  28:	13 c0       	rjmp	.+38     	; 0x50 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ec e3       	ldi	r30, 0x3C	; 60
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a8 37       	cpi	r26, 0x78	; 120
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>
  4c:	02 d0       	rcall	.+4      	; 0x52 <main>
  4e:	74 c0       	rjmp	.+232    	; 0x138 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <main>:
//
// Notes:
// None.
// --------------------------------------------------------------------
int main(void)
{
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	cd b7       	in	r28, 0x3d	; 61
  58:	de b7       	in	r29, 0x3e	; 62
  5a:	a0 97       	sbiw	r28, 0x20	; 32
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  char displayDigit[] = { 0b00111111, 0b00000110, 0b01011011, 0b01001111,
    0b01100110, 0b01101101, 0b01111101, 0b00000111,
    0b01111111, 0b01101111, 0b01110111, 0b01111100,
    0b00111001, 0b01011110, 0b01111001, 0b01110001};
  66:	80 e1       	ldi	r24, 0x10	; 16
  68:	e0 e6       	ldi	r30, 0x60	; 96
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	de 01       	movw	r26, r28
  6e:	11 96       	adiw	r26, 0x01	; 1
  70:	01 90       	ld	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	8a 95       	dec	r24
  76:	e1 f7       	brne	.-8      	; 0x70 <main+0x1e>
  int displayNumber = 0;
  int dispPortA = 0;
  int dispPortC = 0;
  int display[] = {0,0,0,0};
  78:	fe 01       	movw	r30, r28
  7a:	71 96       	adiw	r30, 0x11	; 17
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	df 01       	movw	r26, r30
  80:	1d 92       	st	X+, r1
  82:	8a 95       	dec	r24
  84:	e9 f7       	brne	.-6      	; 0x80 <main+0x2e>
  int digit[] = {0b0111,0b1011,0b1101,0b1110};
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	e0 e7       	ldi	r30, 0x70	; 112
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	de 01       	movw	r26, r28
  8e:	59 96       	adiw	r26, 0x19	; 25
  90:	01 90       	ld	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	8a 95       	dec	r24
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x3e>

  DDRA = 0x00;
  98:	1a ba       	out	0x1a, r1	; 26
  DDRB = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
  DDRC = 0x00;
  9e:	14 ba       	out	0x14, r1	; 20
  DDRD = 0xFF;
  a0:	81 bb       	out	0x11, r24	; 17
  
  PORTA = 0xFF;
  a2:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0xFF;
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5d       	subi	r20, 0xDF	; 223
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  
  while(1) //infinite loop
  {
    dispPortA = PINA;
  ac:	89 b3       	in	r24, 0x19	; 25
    dispPortC = PINC;
  ae:	23 b3       	in	r18, 0x13	; 19
    displayNumber = ((dispPortA<<8)&0xFF00) + (dispPortC&0xFF);
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	98 2f       	mov	r25, r24
  b4:	88 27       	eor	r24, r24
  b6:	82 0f       	add	r24, r18
  b8:	91 1d       	adc	r25, r1
    display[2] = displayNumber & 0x000F;
  ba:	9c 01       	movw	r18, r24
  bc:	2f 70       	andi	r18, 0x0F	; 15
  be:	33 27       	eor	r19, r19
  c0:	3e 8b       	std	Y+22, r19	; 0x16
  c2:	2d 8b       	std	Y+21, r18	; 0x15
    display[3] = (displayNumber>>4) & 0x000F;
  c4:	9c 01       	movw	r18, r24
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	2f 70       	andi	r18, 0x0F	; 15
  d8:	33 27       	eor	r19, r19
  da:	38 8f       	std	Y+24, r19	; 0x18
  dc:	2f 8b       	std	Y+23, r18	; 0x17
    display[1] = (displayNumber>>8) & 0x000F;
  de:	29 2f       	mov	r18, r25
  e0:	33 27       	eor	r19, r19
  e2:	27 fd       	sbrc	r18, 7
  e4:	3a 95       	dec	r19
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	33 27       	eor	r19, r19
  ea:	3c 8b       	std	Y+20, r19	; 0x14
  ec:	2b 8b       	std	Y+19, r18	; 0x13
    display[0] = (displayNumber>>12) & 0x000F;
  ee:	89 2f       	mov	r24, r25
  f0:	82 95       	swap	r24
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	89 8b       	std	Y+17, r24	; 0x11
  f6:	1a 8a       	std	Y+18, r1	; 0x12
  f8:	fe 01       	movw	r30, r28
  fa:	79 96       	adiw	r30, 0x19	; 25
  fc:	be 01       	movw	r22, r28
  fe:	6f 5e       	subi	r22, 0xEF	; 239
 100:	7f 4f       	sbci	r23, 0xFF	; 255
    
    for(int i=0;i<4;i++)
    {
      PORTB = digit[i];
 102:	80 81       	ld	r24, Z
 104:	32 96       	adiw	r30, 0x02	; 2
 106:	88 bb       	out	0x18, r24	; 24
      PORTD = displayDigit[display[i]];
 108:	db 01       	movw	r26, r22
 10a:	8d 91       	ld	r24, X+
 10c:	9d 91       	ld	r25, X+
 10e:	bd 01       	movw	r22, r26
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	2c 0f       	add	r18, r28
 116:	3d 1f       	adc	r19, r29
 118:	82 0f       	add	r24, r18
 11a:	93 1f       	adc	r25, r19
 11c:	dc 01       	movw	r26, r24
 11e:	8c 91       	ld	r24, X
 120:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e8       	ldi	r24, 0x8F	; 143
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0xd4>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xda>
 12c:	00 00       	nop
    display[2] = displayNumber & 0x000F;
    display[3] = (displayNumber>>4) & 0x000F;
    display[1] = (displayNumber>>8) & 0x000F;
    display[0] = (displayNumber>>12) & 0x000F;
    
    for(int i=0;i<4;i++)
 12e:	e4 17       	cp	r30, r20
 130:	f5 07       	cpc	r31, r21
 132:	09 f4       	brne	.+2      	; 0x136 <main+0xe4>
 134:	bb cf       	rjmp	.-138    	; 0xac <main+0x5a>
 136:	e5 cf       	rjmp	.-54     	; 0x102 <main+0xb0>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
