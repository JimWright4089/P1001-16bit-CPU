
SM1001-001-013-600 - Display Debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000942  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000830  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	72 c0       	rjmp	.+228    	; 0x19a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
//
// Notes:
// None.
// --------------------------------------------------------------------
int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	a0 97       	sbiw	r28, 0x20	; 32
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  char displayDigit[] = { 0b00111111, 0b00000110, 0b01011011, 0b01001111,
    0b01100110, 0b01101101, 0b01111101, 0b00000111,
    0b01111111, 0b01101111, 0b01110111, 0b01111100,
    0b00111001, 0b01011110, 0b01111001, 0b01110001};
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
  int displayNumber = 0;
  int dispLow = 0;
  int dispHigh = 0;
  int display[] = {0,0,0,0};
  de:	fe 01       	movw	r30, r28
  e0:	71 96       	adiw	r30, 0x11	; 17
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	df 01       	movw	r26, r30
  e6:	1d 92       	st	X+, r1
  e8:	8a 95       	dec	r24
  ea:	e9 f7       	brne	.-6      	; 0xe6 <main+0x2e>
  int digit[] = {0b1110,0b1101,0b0111,0b1011};
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	e0 e1       	ldi	r30, 0x10	; 16
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	59 96       	adiw	r26, 0x19	; 25
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x3e>

  DDRA = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	81 b9       	out	0x01, r24	; 1
  DDRB = 0xFF;
 102:	84 b9       	out	0x04, r24	; 4
  DDRC = 0x00;
 104:	17 b8       	out	0x07, r1	; 7
  DDRD = 0x00;
 106:	1a b8       	out	0x0a, r1	; 10
 108:	ae 01       	movw	r20, r28
 10a:	4f 5d       	subi	r20, 0xDF	; 223
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
//  PORTC = 0xFF;
//  PORTD = 0xFF;
  
  while(1) //infinite loop
  {
    dispLow = PIND;
 10e:	29 b1       	in	r18, 0x09	; 9
    dispHigh = PINC;
 110:	86 b1       	in	r24, 0x06	; 6
    displayNumber = ((dispHigh<<8)&0xFF00) + (dispLow&0xFF);
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	98 2f       	mov	r25, r24
 116:	88 27       	eor	r24, r24
 118:	82 0f       	add	r24, r18
 11a:	91 1d       	adc	r25, r1
    display[2] = displayNumber & 0x000F;
 11c:	9c 01       	movw	r18, r24
 11e:	2f 70       	andi	r18, 0x0F	; 15
 120:	33 27       	eor	r19, r19
 122:	3e 8b       	std	Y+22, r19	; 0x16
 124:	2d 8b       	std	Y+21, r18	; 0x15
    display[3] = (displayNumber>>4) & 0x000F;
 126:	9c 01       	movw	r18, r24
 128:	35 95       	asr	r19
 12a:	27 95       	ror	r18
 12c:	35 95       	asr	r19
 12e:	27 95       	ror	r18
 130:	35 95       	asr	r19
 132:	27 95       	ror	r18
 134:	35 95       	asr	r19
 136:	27 95       	ror	r18
 138:	2f 70       	andi	r18, 0x0F	; 15
 13a:	33 27       	eor	r19, r19
 13c:	38 8f       	std	Y+24, r19	; 0x18
 13e:	2f 8b       	std	Y+23, r18	; 0x17
    display[1] = (displayNumber>>8) & 0x000F;
 140:	29 2f       	mov	r18, r25
 142:	33 27       	eor	r19, r19
 144:	27 fd       	sbrc	r18, 7
 146:	3a 95       	dec	r19
 148:	2f 70       	andi	r18, 0x0F	; 15
 14a:	33 27       	eor	r19, r19
 14c:	3c 8b       	std	Y+20, r19	; 0x14
 14e:	2b 8b       	std	Y+19, r18	; 0x13
    display[0] = (displayNumber>>12) & 0x000F;
 150:	89 2f       	mov	r24, r25
 152:	82 95       	swap	r24
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	89 8b       	std	Y+17, r24	; 0x11
 158:	1a 8a       	std	Y+18, r1	; 0x12
 15a:	fe 01       	movw	r30, r28
 15c:	79 96       	adiw	r30, 0x19	; 25
 15e:	be 01       	movw	r22, r28
 160:	6f 5e       	subi	r22, 0xEF	; 239
 162:	7f 4f       	sbci	r23, 0xFF	; 255
        
    for(int i=0;i<4;i++)
    {
      PORTB = digit[i];
 164:	80 81       	ld	r24, Z
 166:	32 96       	adiw	r30, 0x02	; 2
 168:	85 b9       	out	0x05, r24	; 5
      PORTA = displayDigit[display[i]];
 16a:	db 01       	movw	r26, r22
 16c:	8d 91       	ld	r24, X+
 16e:	9d 91       	ld	r25, X+
 170:	bd 01       	movw	r22, r26
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	2c 0f       	add	r18, r28
 178:	3d 1f       	adc	r19, r29
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	dc 01       	movw	r26, r24
 180:	8c 91       	ld	r24, X
 182:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e8       	ldi	r24, 0x8F	; 143
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xd0>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0xd6>
 18e:	00 00       	nop
    display[2] = displayNumber & 0x000F;
    display[3] = (displayNumber>>4) & 0x000F;
    display[1] = (displayNumber>>8) & 0x000F;
    display[0] = (displayNumber>>12) & 0x000F;
        
    for(int i=0;i<4;i++)
 190:	e4 17       	cp	r30, r20
 192:	f5 07       	cpc	r31, r21
 194:	09 f4       	brne	.+2      	; 0x198 <main+0xe0>
 196:	bb cf       	rjmp	.-138    	; 0x10e <main+0x56>
 198:	e5 cf       	rjmp	.-54     	; 0x164 <main+0xac>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
