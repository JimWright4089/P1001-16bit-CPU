
SM1001-001-014-600 - Input Output Debuger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fe  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001de  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	0f d0       	rcall	.+30     	; 0x56 <main>
  38:	20 c0       	rjmp	.+64     	; 0x7a <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <_Z10USART_Initj>:


void USART_Init( unsigned int baud )
{
  /* Set baud rate */
  UBRRH = (unsigned char)(baud>>8);
  3c:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)baud;
  3e:	89 b9       	out	0x09, r24	; 9
  /* Enable receiver and transmitter */
  UCSRB = (1<<RXEN)|(1<<TXEN);
  40:	88 e1       	ldi	r24, 0x18	; 24
  42:	8a b9       	out	0x0a, r24	; 10
  44:	08 95       	ret

00000046 <_Z14USART_Transmith>:
}

void USART_Transmit( unsigned char data )
{
  /* Wait for empty transmit buffer */
  while ( !( UCSRA & (1<<UDRE)) )
  46:	5d 9b       	sbis	0x0b, 5	; 11
  48:	fe cf       	rjmp	.-4      	; 0x46 <_Z14USART_Transmith>
  ;
  /* Put data into buffer, sends the data */
  UDR = data;
  4a:	8c b9       	out	0x0c, r24	; 12
  4c:	08 95       	ret

0000004e <_Z13USART_Receivev>:
}

unsigned char USART_Receive( void )
{
  /* Wait for data to be received */
  while ( !(UCSRA & (1<<RXC)) )
  4e:	5f 9b       	sbis	0x0b, 7	; 11
  50:	fe cf       	rjmp	.-4      	; 0x4e <_Z13USART_Receivev>
  ;
  /* Get and return received data from buffer */
  return UDR;
  52:	8c b1       	in	r24, 0x0c	; 12
}
  54:	08 95       	ret

00000056 <main>:
{
  char ch1 = 0;
  char ch2 = 0;
  char ch3 = 0;
  
  DDRA = 0xFF;
  56:	8f ef       	ldi	r24, 0xFF	; 255
  58:	8a bb       	out	0x1a, r24	; 26
  DDRC = 0xFF;
  5a:	84 bb       	out	0x14, r24	; 20
  
  PORTA = 0x01;
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0x00;
  60:	15 ba       	out	0x15, r1	; 21

  USART_Init ( MYUBRR );
  62:	89 e1       	ldi	r24, 0x19	; 25
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	ea df       	rcall	.-44     	; 0x3c <_Z10USART_Initj>
  return UDR;
}

int main()
{
  char ch1 = 0;
  68:	c0 e0       	ldi	r28, 0x00	; 0
  USART_Init ( MYUBRR );
  while(1)
  {
    ch3 = ch2;
    ch2 = ch1;
    ch1 = USART_Receive();
  6a:	f1 df       	rcall	.-30     	; 0x4e <_Z13USART_Receivev>
  6c:	d8 2f       	mov	r29, r24
    USART_Transmit(ch1);
  6e:	eb df       	rcall	.-42     	; 0x46 <_Z14USART_Transmith>
    PORTC = ch1;
  70:	d5 bb       	out	0x15, r29	; 21

unsigned char swap(unsigned char ch)
{
  char ch1 = (ch&0xf0)>>4;
  char ch2 = (ch&0x0f)<<4;
  return ch1+ch2;
  72:	c2 95       	swap	r28
    ch1 = USART_Receive();
    USART_Transmit(ch1);
    PORTC = ch1;
    //PORTA = ch2;
    //PORTA = BitReverseTable256[ch2];
    PORTA = swap(ch2);
  74:	cb bb       	out	0x1b, r28	; 27
  USART_Init ( MYUBRR );
  while(1)
  {
    ch3 = ch2;
    ch2 = ch1;
    ch1 = USART_Receive();
  76:	cd 2f       	mov	r28, r29
  78:	f8 cf       	rjmp	.-16     	; 0x6a <main+0x14>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
