
SM1001-001-014-600 - Input Output Debuger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a8  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018b  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	07 d0       	rcall	.+14     	; 0x46 <main>
  38:	13 c0       	rjmp	.+38     	; 0x60 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <_Z10USART_Initj>:
  /* Wait for data to be received */
  while ( !(UCSRA & (1<<RXC)) )
  ;
  /* Get and return received data from buffer */
  return UDR;
}
  3c:	90 bd       	out	0x20, r25	; 32
  3e:	89 b9       	out	0x09, r24	; 9
  40:	88 e1       	ldi	r24, 0x18	; 24
  42:	8a b9       	out	0x0a, r24	; 10
  44:	08 95       	ret

00000046 <main>:
{
  char ch1 = 0;
  char ch2 = 0;
  char ch3 = 0;
  
  DDRA = 0xFF;
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	8a bb       	out	0x1a, r24	; 26
  DDRC = 0xFF;
  4a:	84 bb       	out	0x14, r24	; 20
  
  PORTA = 0x00;
  4c:	1b ba       	out	0x1b, r1	; 27
  PORTC = 0x00;
  4e:	15 ba       	out	0x15, r1	; 21

  USART_Init ( MYUBRR );
  50:	89 e1       	ldi	r24, 0x19	; 25
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	f3 df       	rcall	.-26     	; 0x3c <_Z10USART_Initj>
    ch3 = ch2;
    ch2 = 0x55;
    ch1 = 0xCC;
//    ch1 = USART_Receive();
//    USART_Transmit(ch1);
    PORTC = ch1;
  56:	9c ec       	ldi	r25, 0xCC	; 204
    //PORTA = ch2;
    //PORTA = BitReverseTable256[ch2];
    PORTA = swap(ch2);
  58:	85 e5       	ldi	r24, 0x55	; 85
    ch3 = ch2;
    ch2 = 0x55;
    ch1 = 0xCC;
//    ch1 = USART_Receive();
//    USART_Transmit(ch1);
    PORTC = ch1;
  5a:	95 bb       	out	0x15, r25	; 21
    //PORTA = ch2;
    //PORTA = BitReverseTable256[ch2];
    PORTA = swap(ch2);
  5c:	8b bb       	out	0x1b, r24	; 27
  5e:	fd cf       	rjmp	.-6      	; 0x5a <main+0x14>

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
